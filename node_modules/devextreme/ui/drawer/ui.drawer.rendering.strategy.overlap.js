/**
 * DevExtreme (ui/drawer/ui.drawer.rendering.strategy.overlap.js)
 * Version: 18.2.3
 * Build date: Wed Nov 07 2018
 *
 * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) {
                descriptor.writable = true
            }
            Object.defineProperty(target, descriptor.key, descriptor)
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) {
            defineProperties(Constructor.prototype, protoProps)
        }
        if (staticProps) {
            defineProperties(Constructor, staticProps)
        }
        return Constructor
    }
}();
var _get = function get(object, property, receiver) {
    if (null === object) {
        object = Function.prototype
    }
    var desc = Object.getOwnPropertyDescriptor(object, property);
    if (void 0 === desc) {
        var parent = Object.getPrototypeOf(object);
        if (null === parent) {
            return
        } else {
            return get(parent, property, receiver)
        }
    } else {
        if ("value" in desc) {
            return desc.value
        } else {
            var getter = desc.get;
            if (void 0 === getter) {
                return
            }
            return getter.call(receiver)
        }
    }
};
var _uiDrawerRendering = require("./ui.drawer.rendering.strategy");
var _uiDrawerRendering2 = _interopRequireDefault(_uiDrawerRendering);
var _renderer = require("../../core/renderer");
var _renderer2 = _interopRequireDefault(_renderer);
var _translator = require("../../animation/translator");
var _translator2 = _interopRequireDefault(_translator);
var _overlay = require("../overlay");
var _overlay2 = _interopRequireDefault(_overlay);
var _type = require("../../core/utils/type");
var _type2 = _interopRequireDefault(_type);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function")
    }
}

function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return call && ("object" === typeof call || "function" === typeof call) ? call : self
}

function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) {
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
    }
}
var OverlapStrategy = function(_DrawerStrategy) {
    _inherits(OverlapStrategy, _DrawerStrategy);

    function OverlapStrategy() {
        _classCallCheck(this, OverlapStrategy);
        return _possibleConstructorReturn(this, (OverlapStrategy.__proto__ || Object.getPrototypeOf(OverlapStrategy)).apply(this, arguments))
    }
    _createClass(OverlapStrategy, [{
        key: "renderPanel",
        value: function(template, whenPanelRendered) {
            delete this._initialPosition;
            var position = this.getOverlayPosition();
            var drawer = this.getDrawerInstance();
            drawer._overlay = drawer._createComponent(drawer.content(), _overlay2.default, {
                shading: false,
                container: drawer.getOverlayTarget(),
                position: position,
                width: "auto",
                height: "100%",
                animation: {
                    show: {
                        duration: 0
                    }
                },
                onPositioned: function(e) {
                    var drawer = this.getDrawerInstance();
                    if (_type2.default.isDefined(this._initialPosition) && !drawer.option("rtlEnabled")) {
                        _translator2.default.move(e.component.$content(), {
                            left: this._initialPosition.left
                        })
                    }
                    if ("right" === drawer.getDrawerPosition()) {
                        e.component.$content().css("left", "auto")
                    }
                }.bind(this),
                contentTemplate: template,
                onContentReady: function() {
                    whenPanelRendered.resolve()
                },
                visible: true,
                propagateOutsideClick: true
            });
            this._processOverlayZIndex()
        }
    }, {
        key: "getOverlayPosition",
        value: function() {
            var drawer = this.getDrawerInstance();
            var panelPosition = drawer.getDrawerPosition();
            var result = {};
            if ("left" === panelPosition) {
                result = {
                    my: "top left",
                    at: "top left"
                }
            }
            if ("right" === panelPosition) {
                var my = drawer.option("rtlEnabled") ? "top left" : "top right";
                result = {
                    my: my,
                    at: "top right"
                }
            }
            if ("top" === panelPosition || "bottom" === panelPosition) {
                result = {
                    my: panelPosition,
                    at: panelPosition
                }
            }
            result.of = drawer.getOverlayTarget();
            return result
        }
    }, {
        key: "setPanelSize",
        value: function(keepMaxSize) {
            var drawer = this.getDrawerInstance();
            var overlay = drawer.getOverlay();
            if (drawer.isHorizontalDirection()) {
                overlay.option("height", "100%");
                overlay.option("width", keepMaxSize ? drawer.getRealPanelWidth() : this._getPanelSize(drawer.option("opened")))
            } else {
                overlay.option("width", overlay.option("container").width());
                overlay.option("height", drawer.getRealPanelHeight())
            }
        }
    }, {
        key: "renderPosition",
        value: function(offset, animate) {
            var _this2 = this;
            _get(OverlapStrategy.prototype.__proto__ || Object.getPrototypeOf(OverlapStrategy.prototype), "renderPosition", this).call(this, offset, animate);
            var drawer = this.getDrawerInstance();
            this._initialPosition = drawer.getOverlay().$content().position();
            var $content = (0, _renderer2.default)(drawer.viewContent());
            var position = drawer.getDrawerPosition();
            if (drawer.isHorizontalDirection()) {
                $content.css("paddingLeft", drawer.option("minSize") * drawer._getPositionCorrection())
            }
            $content.css("transform", "inherit");
            if ("slide" === drawer.option("revealMode")) {
                var $panel = (0, _renderer2.default)(drawer.content());
                var panelOffset = this._getPanelOffset(offset) * drawer._getPositionCorrection();
                if (animate) {
                    var animationConfig = {
                        $element: $panel,
                        position: panelOffset,
                        duration: drawer.option("animationDuration"),
                        direction: position,
                        complete: function() {
                            _this2._contentAnimationResolve();
                            _this2._panelAnimationResolve()
                        }
                    };
                    _uiDrawerRendering.animation.moveTo(animationConfig)
                } else {
                    if (drawer.isHorizontalDirection()) {
                        _translator2.default.move($panel, {
                            left: panelOffset
                        })
                    } else {
                        _translator2.default.move($panel, {
                            top: panelOffset
                        })
                    }
                }
            }
            if ("expand" === drawer.option("revealMode")) {
                var $panelOverlayContent = drawer.getOverlay().$content();
                var size = this._getPanelSize(offset);
                var marginTop = drawer.getRealPanelHeight() - size;
                _translator2.default.move($panelOverlayContent, {
                    left: 0
                });
                var _animationConfig = {
                    $element: $panelOverlayContent,
                    size: size,
                    duration: drawer.option("animationDuration"),
                    direction: position,
                    marginTop: marginTop,
                    complete: function() {
                        _this2._contentAnimationResolve();
                        _this2._panelAnimationResolve()
                    }
                };
                if (animate) {
                    _uiDrawerRendering.animation.size(_animationConfig)
                } else {
                    if (drawer.isHorizontalDirection()) {
                        (0, _renderer2.default)($panelOverlayContent).css("width", size)
                    } else {
                        (0, _renderer2.default)($panelOverlayContent).css("height", size);
                        if ("bottom" === position) {
                            (0, _renderer2.default)($panelOverlayContent).css("marginTop", marginTop)
                        }
                    }
                }
            }
        }
    }, {
        key: "getPanelContent",
        value: function() {
            return (0, _renderer2.default)(this.getDrawerInstance().getOverlay().content())
        }
    }, {
        key: "_processOverlayZIndex",
        value: function() {
            var styles = window.getComputedStyle(this.getPanelContent().get(0));
            var zIndex = styles.zIndex || 1;
            this.getDrawerInstance().setZIndex(zIndex)
        }
    }]);
    return OverlapStrategy
}(_uiDrawerRendering2.default);
module.exports = OverlapStrategy;
